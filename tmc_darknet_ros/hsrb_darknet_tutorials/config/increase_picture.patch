--- deeplearning_tool/increase_picture.py	2017-03-23 11:14:46.661159974 +0900
+++ inflate_images	2017-03-23 11:18:01.706043524 +0900
@@ -8,7 +8,7 @@
 import numpy as np
 import sys
 import os
-
+from shutil import copyfile
 # ヒストグラム均一化
 def equalizeHistRGB(src):
     
@@ -53,7 +53,8 @@
     out[coords[:-1]] = (0,0,0)
     return out
 
-if __name__ == '__main__':
+
+def main(data_dir, file_name, class_num):
     # ルックアップテーブルの生成
     min_table = 50
     max_table = 205
@@ -93,7 +94,8 @@
     LUTs.append(LUT_G2)
 
     # 画像の読み込み
-    img_src = cv2.imread(sys.argv[1], 1)
+    img_src = cv2.imread(
+        "{0}/images/{1}/{2}".format(data_dir, class_num, file_name), 1)
     trans_img = []
     trans_img.append(img_src)
     
@@ -112,19 +114,56 @@
     trans_img.append(addSaltPepperNoise(img_src))
 
     # 反転
+    flip_num = len(trans_img)
     flip_img = []
     for img in trans_img:
         flip_img.append(cv2.flip(img, 1))
     trans_img.extend(flip_img)
+    if not os.path.exists("{0}/inflated_images".format(data_dir)):
+        os.mkdir("{0}/inflated_images".format(data_dir))
+    if not os.path.exists("{0}/inflated_labels".format(data_dir)):
+        os.mkdir("{0}/inflated_labels".format(data_dir))
 
     # 保存
-    if not os.path.exists("trans_images"):
-        os.mkdir("trans_images")
-    
-    base =  os.path.splitext(os.path.basename(sys.argv[1]))[0] + "_"
+    base = os.path.splitext(os.path.basename(file_name))[0] + "_"
     img_src.astype(np.float64)
     for i, img in enumerate(trans_img):
-        # 比較用
-        # cv2.imwrite("trans_images/" + base + str(i) + ".jpg" ,cv2.hconcat([img_src.astype(np.float64), img.astype(np.float64)]))
-        cv2.imwrite("trans_images/" + base + str(i) + ".jpg" ,img) 
+        if not os.path.exists("{0}/inflated_images/{1}".format(data_dir, class_num)):
+            os.mkdir("{0}/inflated_images/{1}".format(data_dir, class_num))
+        if not os.path.exists("{0}/inflated_labels/{1}".format(data_dir, class_num)):
+            os.mkdir("{0}/inflated_labels/{1}".format(data_dir, class_num))
+        new_file_name = base + str(i)
+        text_file_name = file_name.replace(".jpg", ".txt")
+        cv2.imwrite(
+            "{0}/inflated_images/{1}/{2}".format(data_dir, class_num, new_file_name + ".jpg"), img)
+        if i < flip_num:
+            copyfile("{0}/labels/{1}/{2}".format(data_dir, class_num, text_file_name),
+                     "{0}/inflated_labels/{1}/{2}".format(data_dir, class_num, new_file_name + ".txt"))
+        else:
+            with open("{0}/inflated_labels/{1}/{2}".format(data_dir,
+                                                           class_num,
+                                                           new_file_name + ".txt"), "w") as new_bb_data:
+                with open("{0}/labels/{1}/{2}".format(data_dir, class_num, text_file_name), "r") as bb_data:
+                    for line in bb_data.readlines():
+                        elems = line.split(' ')
+                        if len(elems) != 4:
+                            new_bb_data.write(line)
+                            continue
+                        x1 = int(elems[0])
+                        y1 = int(elems[1])
+                        x2 = int(elems[2])
+                        y2 = int(elems[3])
+                        width = img_src.shape[1]
+                        new_bb_data.write("{0} {1} {2} {3}\n".format(
+                            width - x2, y1, width - x1, y2))
 
+if __name__ == '__main__':
+    if len(sys.argv) < 2:
+        print "please set data directory path."
+        exit(-1)
+    data_dir = sys.argv[1]
+    for _, dirs, _ in os.walk("{0}/images/".format(data_dir)):
+        for class_num in dirs:
+            for _, _, files in os.walk("{0}/images/{1}".format(data_dir, class_num)):
+                for file_name in files:
+                    main(data_dir, file_name, class_num)
