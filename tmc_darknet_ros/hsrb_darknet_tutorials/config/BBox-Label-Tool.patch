--- main.py	2017-03-23 10:54:49.907904185 +0900
+++ patched_main.py	2017-03-23 10:55:50.464162518 +0900
@@ -1,3 +1,4 @@
+#!/usr/bin/env python
 #-------------------------------------------------------------------------------
 # Name:        Object bounding box label tool
 # Purpose:     Label object bboxes for ImageNet Detection data
@@ -20,7 +21,8 @@
 SIZE = 256, 256
 
 class LabelTool():
-    def __init__(self, master):
+
+    def __init__(self, master, data_dir):
         # set up the main frame
         self.parent = master
         self.parent.title("LabelTool")
@@ -31,8 +33,6 @@
         # initialize global state
         self.imageDir = ''
         self.imageList= []
-        self.egDir = ''
-        self.egList = []
         self.outDir = ''
         self.cur = 0
         self.total = 0
@@ -40,6 +40,7 @@
         self.imagename = ''
         self.labelfilename = ''
         self.tkimg = None
+        self.dataDir = data_dir
 
         # initialize mouse state
         self.STATE = {}
@@ -98,15 +99,6 @@
         self.goBtn = Button(self.ctrPanel, text = 'Go', command = self.gotoImage)
         self.goBtn.pack(side = LEFT)
 
-        # example pannel for illustration
-        self.egPanel = Frame(self.frame, border = 10)
-        self.egPanel.grid(row = 1, column = 0, rowspan = 5, sticky = N)
-        self.tmpLabel2 = Label(self.egPanel, text = "Examples:")
-        self.tmpLabel2.pack(side = TOP, pady = 5)
-        self.egLabels = []
-        for i in range(3):
-            self.egLabels.append(Label(self.egPanel))
-            self.egLabels[-1].pack(side = TOP)
 
         # display mouse position
         self.disp = Label(self.ctrPanel, text='')
@@ -130,39 +122,23 @@
 ##            tkMessageBox.showerror("Error!", message = "The specified dir doesn't exist!")
 ##            return
         # get image list
-        self.imageDir = os.path.join(r'./Images', '%03d' %(self.category))
-        self.imageList = glob.glob(os.path.join(self.imageDir, '*.JPEG'))
+        self.imageDir = os.path.join(
+            self.dataDir, r'./images', '%03d' % (self.category))
+        self.imageList = glob.glob(os.path.join(self.imageDir, '*.jpg'))
         if len(self.imageList) == 0:
-            print 'No .JPEG images found in the specified dir!'
+            print 'No .jpg images found in the specified dir!'
             return
 
         # default to the 1st image in the collection
         self.cur = 1
         self.total = len(self.imageList)
 
-         # set up output dir
-        self.outDir = os.path.join(r'./Labels', '%03d' %(self.category))
+        # set up output dir
+        self.outDir = os.path.join(
+            self.dataDir, r'./labels', '%03d' % (self.category))
         if not os.path.exists(self.outDir):
             os.mkdir(self.outDir)
 
-        # load example bboxes
-        self.egDir = os.path.join(r'./Examples', '%03d' %(self.category))
-        if not os.path.exists(self.egDir):
-            return
-        filelist = glob.glob(os.path.join(self.egDir, '*.JPEG'))
-        self.tmp = []
-        self.egList = []
-        random.shuffle(filelist)
-        for (i, f) in enumerate(filelist):
-            if i == 3:
-                break
-            im = Image.open(f)
-            r = min(SIZE[0] / im.size[0], SIZE[1] / im.size[1])
-            new_size = int(r * im.size[0]), int(r * im.size[1])
-            self.tmp.append(im.resize(new_size, Image.ANTIALIAS))
-            self.egList.append(ImageTk.PhotoImage(self.tmp[-1]))
-            self.egLabels[i].config(image = self.egList[-1], width = SIZE[0], height = SIZE[1])
-
         self.loadImage()
         print '%d images loaded from %s' %(self.total, s)
 
@@ -287,7 +263,11 @@
 ##        self.mainPanel.create_image(0, 0, image = self.tkimg, anchor=NW)
 
 if __name__ == '__main__':
+    if len(sys.argv) < 2:
+        print "please set data directory path."
+        exit(-1)
+    data_dir = sys.argv[1]
     root = Tk()
-    tool = LabelTool(root)
+    tool = LabelTool(root, data_dir)
     root.resizable(width =  True, height = True)
     root.mainloop()
